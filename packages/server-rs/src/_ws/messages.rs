use super::LocaleClient;
use log::warn;
use serde::{Deserialize, Serialize};
use std::str::FromStr;

#[allow(non_snake_case)]
#[derive(Serialize, Deserialize)]
pub struct MessageArgs<T> {
    pub id: String,
    pub connId: String,
    pub r#type: MessageType,
    pub data: T,
}
#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, PartialEq)]
pub enum MessageType {
    SET_LOCALE,
    GET_LOCALE,
    GET_USER_ID,
    SET_USER_ID,
    GET_LOGIN,
    TOKEN,
    OFFER,
    CANDIDATE,
    ANSWER,
    GET_ROOM,
    SET_ROOM,
    GET_CHAT_UNIT,
    GET_SETTINGS_UNIT,
    SET_ERROR,
    GET_ROOM_GUESTS,
    SET_ROOM_GUESTS,
    SET_CHANGE_UNIT,
    GET_MUTE,
    SET_MUTE,
    GET_NEED_RECONNECT,
    GET_CLOSE_PEER_CONNECTION,
    SET_CLOSE_PEER_CONNECTION,
    GET_ROOM_MESSAGE,
    SET_ROOM_MESSAGE,
    SET_CHAT_UNIT,
    SET_SETTINGS_UNIT,
    GET_CHAT_MESSAGES,
    SET_CHAT_MESSAGES,
    GET_EDIT_MESSAGE,
    SET_EDIT_MESSAGE,
    GET_CREATE_MESSAGE,
    SET_CREATE_MESSAGE,
    GET_CREATE_QUOTE,
    SET_CREATE_QUOTE,
    GET_DELETE_MESSAGE,
    SET_DELETE_MESSAGE,
    GET_TO_MUTE,
    GET_TO_BAN,
    GET_TO_UNMUTE,
    GET_TO_UNBAN,
    SET_BAN_LIST,
    SET_MUTE_LIST,
    GET_RECORD,
    SET_RECORDING,
    GET_VIDEO_FIND_MANY,
    SET_VIDEO_FIND_MANY,
    GET_VIDEO_FIND_FIRST,
    SET_VIDEO_FIND_FIRST,
    GET_ASK_FLOOR,
    SET_ASK_FLOOR,
    GET_MUTE_FOR_ALL,
    SET_MUTE_FOR_ALL,
    GET_BLOCK_CHAT,
    SET_BLOCK_CHAT,
    GET_VIDEO_TRACK,
    SET_VIDEO_TRACK,
    GET_TO_ADMIN,
    SET_TO_ADMIN,
    GET_VIDEO_SETTINGS,
    SET_CREATE_VIDEO,
    GET_VIDEO_DELETE,
    SET_VIDEO_DELETE,
    GET_VIDEO_UPDATE,
    SET_VIDEO_UPDATE,
}

impl FromStr for MessageType {
    type Err = ();
    fn from_str(input: &str) -> Result<MessageType, ()> {
        match input {
            "GET_LOCALE" => Ok(MessageType::GET_LOCALE),
            "SET_LOCALE" => Ok(MessageType::SET_LOCALE),
            "GET_USER_ID" => Ok(MessageType::GET_USER_ID),
            "SET_USER_ID" => Ok(MessageType::SET_USER_ID),
            "GET_LOGIN" => Ok(MessageType::GET_LOGIN),
            "TOKEN" => Ok(MessageType::TOKEN),
            "OFFER" => Ok(MessageType::OFFER),
            "ANSWER" => Ok(MessageType::ANSWER),
            "CANDIDATE" => Ok(MessageType::CANDIDATE),
            "GET_ROOM" => Ok(MessageType::GET_ROOM),
            "SET_ROOM" => Ok(MessageType::SET_ROOM),
            "GET_CHAT_UNIT" => Ok(MessageType::GET_CHAT_UNIT),
            "GET_SETTINGS_UNIT" => Ok(MessageType::GET_SETTINGS_UNIT),
            "SET_ERROR" => Ok(MessageType::SET_ERROR),
            "GET_ROOM_GUESTS" => Ok(MessageType::GET_ROOM_GUESTS),
            "SET_ROOM_GUESTS" => Ok(MessageType::SET_ROOM_GUESTS),
            "SET_CHANGE_UNIT" => Ok(MessageType::SET_CHANGE_UNIT),
            "GET_MUTE" => Ok(MessageType::GET_MUTE),
            "GET_NEED_RECONNECT" => Ok(MessageType::GET_NEED_RECONNECT),
            "SET_MUTE" => Ok(MessageType::SET_MUTE),
            "GET_CLOSE_PEER_CONNECTION" => Ok(MessageType::GET_CLOSE_PEER_CONNECTION),
            "SET_CLOSE_PEER_CONNECTION" => Ok(MessageType::SET_CLOSE_PEER_CONNECTION),
            "GET_ROOM_MESSAGE" => Ok(MessageType::GET_ROOM_MESSAGE),
            "SET_ROOM_MESSAGE" => Ok(MessageType::SET_ROOM_MESSAGE),
            "SET_CHAT_UNIT" => Ok(MessageType::SET_CHAT_UNIT),
            "SET_SETTINGS_UNIT" => Ok(MessageType::SET_SETTINGS_UNIT),
            "GET_CHAT_MESSAGES" => Ok(MessageType::GET_CHAT_MESSAGES),
            "SET_CHAT_MESSAGES" => Ok(MessageType::SET_CHAT_MESSAGES),
            "GET_EDIT_MESSAGE" => Ok(MessageType::GET_EDIT_MESSAGE),
            "SET_EDIT_MESSAGE" => Ok(MessageType::SET_EDIT_MESSAGE),
            "GET_CREATE_MESSAGE" => Ok(MessageType::GET_CREATE_MESSAGE),
            "SET_CREATE_MESSAGE" => Ok(MessageType::SET_CREATE_MESSAGE),
            "GET_CREATE_QUOTE" => Ok(MessageType::GET_CREATE_QUOTE),
            "SET_CREATE_QUOTE" => Ok(MessageType::SET_CREATE_QUOTE),
            "GET_DELETE_MESSAGE" => Ok(MessageType::GET_DELETE_MESSAGE),
            "SET_DELETE_MESSAGE" => Ok(MessageType::SET_DELETE_MESSAGE),
            "GET_TO_MUTE" => Ok(MessageType::GET_TO_MUTE),
            "GET_TO_BAN" => Ok(MessageType::GET_TO_BAN),
            "GET_TO_UNMUTE" => Ok(MessageType::GET_TO_UNMUTE),
            "GET_TO_UNBAN" => Ok(MessageType::GET_TO_UNBAN),
            "SET_BAN_LIST" => Ok(MessageType::SET_BAN_LIST),
            "SET_MUTE_LIST" => Ok(MessageType::SET_MUTE_LIST),
            "GET_RECORD" => Ok(MessageType::GET_RECORD),
            "SET_RECORDING" => Ok(MessageType::SET_RECORDING),
            "GET_VIDEO_FIND_MANY" => Ok(MessageType::GET_VIDEO_FIND_MANY),
            "SET_VIDEO_FIND_MANY" => Ok(MessageType::SET_VIDEO_FIND_MANY),
            "GET_VIDEO_FIND_FIRST" => Ok(MessageType::GET_VIDEO_FIND_FIRST),
            "SET_VIDEO_FIND_FIRST" => Ok(MessageType::SET_VIDEO_FIND_FIRST),
            "GET_ASK_FLOOR" => Ok(MessageType::GET_ASK_FLOOR),
            "SET_ASK_FLOOR" => Ok(MessageType::SET_ASK_FLOOR),
            "GET_MUTE_FOR_ALL" => Ok(MessageType::GET_MUTE_FOR_ALL),
            "SET_MUTE_FOR_ALL" => Ok(MessageType::SET_MUTE_FOR_ALL),
            "GET_BLOCK_CHAT" => Ok(MessageType::GET_BLOCK_CHAT),
            "SET_BLOCK_CHAT" => Ok(MessageType::SET_BLOCK_CHAT),
            "GET_VIDEO_TRACK" => Ok(MessageType::GET_VIDEO_TRACK),
            "SET_VIDEO_TRACK" => Ok(MessageType::SET_VIDEO_TRACK),
            "GET_TO_ADMIN" => Ok(MessageType::GET_TO_ADMIN),
            "SET_TO_ADMIN" => Ok(MessageType::SET_TO_ADMIN),
            "GET_VIDEO_SETTINGS" => Ok(MessageType::GET_VIDEO_SETTINGS),
            "SET_CREATE_VIDEO" => Ok(MessageType::SET_CREATE_VIDEO),
            "GET_VIDEO_DELETE" => Ok(MessageType::GET_VIDEO_DELETE),
            "SET_VIDEO_DELETE" => Ok(MessageType::SET_VIDEO_DELETE),
            "GET_VIDEO_UPDATE" => Ok(MessageType::GET_VIDEO_UPDATE),
            "SET_VIDEO_UPDATE" => Ok(MessageType::SET_VIDEO_UPDATE),
            _ => {
                warn!("Default case of MessageType: {}", input);
                Err(())
            }
        }
    }
}

#[derive(Serialize)]
pub struct LocaleMsg {
    pub locale: LocaleClient<'static>,
}
